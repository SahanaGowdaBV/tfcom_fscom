name: Print Current Branch

on:
  push:
    branches: 
      release/2024.01-1.0
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    outputs: 
      branch: ${{ steps.current_branch.outputs.BRANCH }}
      pipelineYaml: ${{ steps.read_yaml.outputs.pipelineYaml }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          echo "BRANCH=$branch_name" | tee -a $GITHUB_ENV
          echo "BRANCH=$branch_name" >> $GITHUB_ENV
          echo "BRANCH=$branch_name" | tee -a $GITHUB_OUTPUT
          echo "branch: $branch_name"
        id: current_branch
        
      - name: Read Pipeline YAML
        shell: bash      
        id: read_yaml
        run: |
          pipelineYaml=$(cat pipeline.yaml)
          pipelineYaml="${pipelineYaml//'%'/'%25'}"
          pipelineYaml="${pipelineYaml//$'\n'/'%0A'}"
          pipelineYaml="${pipelineYaml//$'\r'/'%0D'}"
          echo "::set-output name=pipelineYaml::$pipelineYaml"
  
      - name: env-list
        shell: bash
        id: env-list
        env:
          PIPELINE: ${{ steps.read_yaml.outputs.pipelineYaml }}
          CURRENT_BRANCH: ${{ steps.current_branch.outputs.branch }}
        run: |
          # Set a flag to track if any match is found
          found_match=false
          
          # Loop through environments
          keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[]' -)
          for key in $keys; do
            branch=$(echo "$PIPELINE" | yq eval ".environments.$key.branch" -)
            echo "Environment: $key, Branch in YAML: $branch, Current Branch: $CURRENT_BRANCH"
            
            # Check if the current branch matches the environment branch
            if [ "${branch}" != "null" ] && [[ "${CURRENT_BRANCH}" == ${branch%%/*}* ]]; then
              echo "Current branch matches for environment: $key"
              found_match=true
              matched_envs+=($key)
            fi
          done
          
          # Exit the job if no match is found
          if [ "$found_match" = false ]; then
            echo "No match found. Exiting the job."
            exit 1  
          fi   
         
          to=''
          
          # Iterate over matched environments
          for env in "${matched_envs[@]}"; do
            branch_name=$(echo "$PIPELINE" | yq eval ".environments.$env.branch" -)
            echo "branch_name=$branch_name" >> GITHUB_OUTPUT
            echo "branch_name=$branch_name" >> GITHUB_ENV
            echo "::set-output name=BRANCH_NAME::$branch_name"
            # Set the initial environment
            current_env="$env"
          
            # Extract and append the "to" values for the specified environment and its promotions
            while [ "$current_env" != "null" ]; do
              # Extract the value of 'to' field
              to_1=$(echo "$PIPELINE" | yq eval ".environments.$current_env.promotion.to" -)
              echo "to_1=$to_1"
              
              # Append the values to 'to' variable
              to="${to} ${to_1}"
          
              # Move to the next environment
              env_1=$(echo "$PIPELINE" | yq eval ".environments.$current_env.promotion.mergeTo" -)
              current_env="${env_1}"
            done
          done
   
          # Remove leading whitespace
          to=$(echo "$to" | sed 's/^[[:space:]]*//')
          
          # Output the result
          echo "TO=$to" >> GITHUB_OUTPUT
          echo "TO=$to" >> GITHUB_ENV
          echo "::set-output name=TO::$to"







