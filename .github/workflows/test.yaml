name: Print Current Branch

on:
  push:
    branches: 
      release/2024.01-1.0
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    outputs: 
      branch: ${{ steps.current_branch.outputs.BRANCH }}
      pipelineYaml: ${{ steps.read_yaml.outputs.pipelineYaml }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Read Pipeline YAML
        shell: bash      
        id: read_yaml
        run: |
          pipelineYaml=$(cat pipeline.yaml)
          pipelineYaml="${pipelineYaml//'%'/'%25'}"
          pipelineYaml="${pipelineYaml//$'\n'/'%0A'}"
          pipelineYaml="${pipelineYaml//$'\r'/'%0D'}"
          # echo "pipelineYaml=$pipelineYaml" | tee -a $GITHUB_ENV
          echo "::set-output name=pipelineYaml::$pipelineYaml"
          # echo "pipelineYaml=$pipelineYaml" | tee -a $GITHUB_OUTPUT 
  
      - name: env-list
        shell: bash
        id: env-list
        env:
          PIPELINE: ${{ steps.read_yaml.outputs.pipelineYaml }}
          IMAGE: ${{ steps.build-image.outputs.image }}
          REGI_NAME: techops-docker-prod.ha-us.dso.thermofisher.net
          ENV: ${{ steps.promote.outputs.ENV_LIST }}
          # CURRENT_BRANCH: ${{ needs.main.outputs.branch }}
          # PIPELINE_TYPE: ${{ needs.main.outputs.pipelinetype }}
        run: |
          startingenv=$(echo "$PIPELINE" | yq eval '.environments | keys | .[0]' -)
          # echo "startingenv=$startingenv" >> GITHUB_OUTPUT
          echo "startingenv=$startingenv" >> GITHUB_ENV
          echo "startingenv: $startingenv"
          # keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[0]' -)
          # mergeTo=$(echo "$PIPELINE" | yq eval ".environments[\"$keys\"].promotion.mergeTo" -)
          # echo "mergeTo: $mergeTo"
          echo "current_branch: $current_branch" >> GITHUB_ENV
          echo "Validating the branch for environments:"
          # Set a flag to track if any match is found
          found_match=false
          
          # Loop through environments
          keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[]' -)
          for key in $keys; do
            branch=$(echo "$PIPELINE" | yq eval ".environments.$key.branch" -)
            echo "branch=$branch" >> GITHUB_OUTPUT
            echo "branch=$branch" >> GITHUB_ENV
            echo "Environment: $key, Branch in YAML: $branch, Current Branch: $current_branch"
            
            # Check if the current branch matches the environment branch
            if [ "${branch}" != "null" ] && [[ "${current_branch}" == ${branch%%/*}* ]]; then
              echo "Current branch matches for environment: $key"
              found_match=true
              matched_envs+=($key)
            fi
          done
          
          # Exit the job if no match is found
          if [ "$found_match" = false ]; then
            echo "No match found. Exiting the job."
            exit 1  
          fi   
         
          # mergeTo=$(echo "$PIPELINE" | yq eval ".environments[\"$matched_envs\"].promotion.mergeTo" -)
          # echo "mergeTo=$mergeTo" >> GITHUB_OUTPUT
          # echo "mergeTo=$mergeTo" >> GITHUB_ENV
          # echo "::set-output name=mergeTo::$mergeTo"
          # echo "mergeTo: $mergeTo"
  
          to=''
          mergeTo=''
  
          # Iterate over matched environments
          for env in "${matched_envs[@]}"; do
            branch_name=$(echo "$PIPELINE" | yq eval ".environments.$env.branch" -)
            echo "branch_name=$branch_name" >> GITHUB_OUTPUT
            echo "branch_name=$branch_name" >> GITHUB_ENV
            echo "::set-output name=BRANCH_NAME::$branch_name"
            # Set the initial environment
            current_env="$env"
  
            # Extract and append the "to" values for the specified environment and its promotions
            while [ "$current_env" != "null" ]; do
              # Extract the value of 'to' field
              to_1=$(echo "$PIPELINE" | yq read - "$PIPELINE" | yq eval ".environments.$current_env.promotion.to" -)
  
              # Append the values to 'to' variable
              to="${to} ${to_1}"
  
              # Move to the next environment
              env_1=$(echo "$PIPELINE" | yq eval ".environments.$current_env.promotion.to" -)
              current_env="${env_1}"
  
            done
          done
  
          # Remove leading whitespace
          to=$(echo "$to" | sed 's/^[[:space:]]*//')
  
          # Output the result
          echo "TO=$to" >> GITHUB_OUTPUT
          echo "TO=$to" >> GITHUB_ENV
          echo "::set-output name=TO::$to"




