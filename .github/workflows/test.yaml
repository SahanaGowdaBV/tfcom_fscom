name: Your Workflow

on:
  workflow_dispatch:
  issues:
    types:
      - closed

jobs:
  pass-parameters:
    # if: github.event.issue.user.login == 'sahana-vishwanath-tfs' || github.event.issue.user.login == 'bhanuchandra-m-tfs'
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    outputs:
        clustername: ${{ steps.extract.outputs.clustername }}
        namespace: ${{ steps.extract.outputs.namespace }}
        iamRole: ${{ steps.extract.outputs.iamRole }}
        namespaceAdminEmail: ${{ steps.extract.outputs.namespaceAdminEmail }}
    steps:
      - name: Checkout repository content
        uses: actions/checkout@v3

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::219919340901:role/techops-sre-pipeline-role
          aws-region: "us-east-1"

      - name: Extract issue details
        id: extract
        shell: bash
        run: |
          echo "clustername=$(awk -F ': ' '/clustername:/ {print $2}' <<< "${{ github.event.issue.body }}")" >> $GITHUB_OUTPUT
          echo "namespace=$(awk -F ': ' '/namespace:/ {print $2}' <<< "${{ github.event.issue.body }}")" >> $GITHUB_OUTPUT
          echo "iamRole=$(awk -F ': ' '/iamRole:/ {print $2}' <<< "${{ github.event.issue.body }}")" >> $GITHUB_OUTPUT
          echo "namespaceAdminEmail=$(awk -F ': ' '/namespaceAdminEmail:/ {print $2}' <<< "${{ github.event.issue.body }}")" >> $GITHUB_OUTPUT

      # - name: Extract cluster secrets 
      #   id: secret
      #   shell: bash
      #   env: 
      #     clustername: "${{ steps.extract.outputs.clustername }}"
      #     namespace: ${{ steps.extract.outputs.namespace }}
      #     iamRole: ${{ steps.extract.outputs.iamRole }}
      #     namespaceAdminEmail: ${{ steps.extract.outputs.namespaceAdminEmail }}
      #   run: |
      #     echo "clustername: $clustername"
      #     clustername_trimmed="$(echo -e "${clustername}" | tr -d '[:space:]')"
      #     echo "namespace: ${{ steps.extract.outputs.namespace }}"
      #     echo "iamRole: ${{ steps.extract.outputs.iamRole }}"
      #     echo "namespaceAdminEmail: ${{ steps.extract.outputs.namespaceAdminEmail }}"

      #     echo "Running command: aws secretsmanager get-secret-value --secret-id "techops-${clustername_trimmed}" --query 'SecretString' |  cut -d: -f2 | tr -d \"} | tr -d '\\' | base64 --decode"
      #     TECHS_BUILDER_CLUSTER=$(aws secretsmanager get-secret-value --secret-id "techops-${clustername_trimmed}" --query 'SecretString' |  cut -d: -f2 | tr -d \"} | tr -d '\\' | base64 --decode)
      #     INJECT_GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id techops-github --query 'SecretString' |  cut -d: -f2 | tr -d \"} | tr -d '\\')   

      #     echo "::add-mask::$INJECT_GITHUB_TOKEN"
      #     echo "INJECT_GITHUB_TOKEN=$INJECT_GITHUB_TOKEN" >> $GITHUB_OUTPUT

      #     echo "TECHS_BUILDER_CLUSTER: $TECHS_BUILDER_CLUSTER"
      #     TECHS_BUILDER_CLUSTER="${TECHS_BUILDER_CLUSTER//'%'/'%25'}"
      #     TECHS_BUILDER_CLUSTER="${TECHS_BUILDER_CLUSTER//$'\n'/'%0A'}"
      #     TECHS_BUILDER_CLUSTER="${TECHS_BUILDER_CLUSTER//$'\r'/'%0D'}"
      #     echo "::add-mask::$TECHS_BUILDER_CLUSTER"
      #     echo "::set-output name=TECHS_BUILDER_CLUSTER::$TECHS_BUILDER_CLUSTER"

      # - name: Add comment to issue
      #   uses: actions/github-script@v5
      #   with:
      #     github-token: ${{ secrets.GIT_PAT }}
      #     script: |
      #       const issue_number = github.context.issue.number;
      #       const comment_body = "Namespace was successfully created";
      #       github.issues.createComment({
      #         issue_number,
      #         owner: github.context.repo.owner,
      #         repo: github.context.repo.repo,
      #         body: comment_body
      #       });
      # - name: Setup Kube Config
      #   shell: bash
      #   env:      
      #     TECHS_BUILDER_CLUSTER: ${{ steps.secret.outputs.TECHS_BUILDER_CLUSTER }}   
      #     clustername: "${{ steps.extract.outputs.clustername }}"
      #     namespace: ${{ steps.extract.outputs.namespace }}
      #     iamRole: ${{ steps.extract.outputs.iamRole }}
      #     namespaceAdminEmail: ${{ steps.extract.outputs.namespaceAdminEmail }}
      #   run: |
      #     # Setup Kube config 
      #     echo "$TECHS_BUILDER_CLUSTER" > builderconfig.yaml
      #     pwd
      #     ls -la

      #     # Check the existence and permissions of the script
      #     ls -la create_namespace.sh
      #     chmod +x create_namespace.sh
      
      #     # Run kubectl cluster-info
      #     kubectl cluster-info --kubeconfig=builderconfig.yaml
      #     bash create_namespace.sh $namespace $namespaceAdminEmail $iamRole

      - name: Debug Output
        run: |
          echo "Issue Number: $issue_number"
          echo "Repo Owner: $repo_owner"
          echo "Repo Name: $repo_name"
          echo "Constructed URL: https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number/comments"

      - name: Add comment to the issue
        env:      
          # GITHUB_TOKEN: ${{ steps.secret.outputs.INJECT_GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          comment_body="Namespace was successfully created"

            issue_number="${{ github.event.issue.number }}"
            repo_owner="${{ github.repository_owner }}"
            repo_name="${{ github.repository }}"

            echo "Issue Number: $issue_number"
            echo "Repo Owner: $repo_owner"
            echo "Repo Name: $repo_name"
            echo "Constructed URL: https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number/comments"

            curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"body\": \"$comment_body\"}" \
            --verbose \
            "https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number/comments" 







