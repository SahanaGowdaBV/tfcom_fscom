name: Promote

on:
  push:
    branches: 
      integration/2024.01-1.0
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    outputs: 
      branch: ${{ steps.current_branch.outputs.BRANCH }}
      pipelineYaml: ${{ steps.read_yaml.outputs.pipelineYaml }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          echo "BRANCH=$branch_name" | tee -a $GITHUB_OUTPUT
          echo "branch: $branch_name"
        id: current_branch

      - name: Read Pipeline YAML
        id: read_yaml
        run: |
          pipelineYaml=$(cat pipeline.yaml)
          pipelineYaml="${pipelineYaml//'%'/'%25'}"
          pipelineYaml="${pipelineYaml//$'\n'/'%0A'}"
          pipelineYaml="${pipelineYaml//$'\r'/'%0D'}"
          # echo "pipelineYaml=$pipelineYaml" | tee -a $GITHUB_ENV
          echo "::set-output name=pipelineYaml::$pipelineYaml"
          # echo "pipelineYaml=$pipelineYaml" | tee -a $GITHUB_OUTPUT 


  Build:
    # if: ${{ github.job == build }}
    needs: main
    runs-on: ubuntu-latest
    outputs: 
      image: ${{ steps.build-image.outputs.IMAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Extract branch name
        env:
          PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
        shell: bash
        run: |
          keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[0]' -)
          echo "keys: $keys"
        id: current_branch

      - name: List the Environmets
        shell: bash
        id: env-list
        env:
          PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
          CURRENT_BRANCH: ${{ needs.main.outputs.branch }}
        run: |
          echo "current_branch: $current_branch"
          echo "Validating the branch for environments:"
          # Set a flag to track if any match is found
          found_match=false
          
          # Loop through environments
          keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[]' -)
          for key in $keys; do
            branch=$(echo "$PIPELINE" | yq eval ".environments.$key.branch" -)
            echo "Environment: $key, Branch in YAML: $branch, Current Branch: $CURRENT_BRANCH"
            
            # Check if the current branch matches the environment branch
            if [ "${branch}" != "null" ] && [[ "${CURRENT_BRANCH}" == ${branch%%/*}* ]]; then
              echo "Current branch matches for environment: $key"
              found_match=true
              matched_envs+=($key)
            fi
          done
          
          # Exit the job if no match is found
          if [ "$found_match" = false ]; then
            echo "No match found. Exiting the job."
            exit 1  # Use a non-zero status code to indicate failure
          fi   
    
          # Extract the mergeTo and to values for each matched environment
          for env in "${matched_envs[@]}"; do
            mergeTo=$(echo "$PIPELINE" | yq eval ".environments.$env.promotion.mergeTo" -)
            to=$(echo "$PIPELINE" | yq eval ".environments.$env.promotion.to" -)
      
            # Store or use the values as needed
            echo "For environment - mergeTo: $mergeTo, to: $to"
            # Extract 'to' and 'mergeTo' values and process them as needed
            IFS=',' read -ra to_array <<< "$to"
            IFS=',' read -ra mergeTo_array <<< "$mergeTo"
            for i in "${!to_array[@]}"; do
                target_env="${to_array[i]}"
                target_to="${mergeTo_array[i]}"

                # Extract 'to' and 'mergeTo' values for the target environment
                target_to_value=$(echo "$PIPELINE" | yq eval ".environments.$target_env.promotion.to" -)
                target_mergeTo_value=$(echo "$PIPELINE" | yq eval ".environments.$target_env.promotion.mergeTo" -)
        
                echo "Target environment: $target_env"
                echo "To value under $target_env: $target_to_value"
                echo "MergeTo value under $target_env: $target_mergeTo_value"
            done
          done
