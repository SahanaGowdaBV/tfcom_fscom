name: Print Current Branch

on:
  push:
    branches: 
      release/2024.01-1.0
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    outputs: 
      branch: ${{ steps.current_branch.outputs.BRANCH }}
      pipelineYaml: ${{ steps.read_yaml.outputs.pipelineYaml }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Extract branch name
        shell: bash
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          echo "BRANCH=$branch_name" | tee -a $GITHUB_OUTPUT
          echo "branch: $branch_name"
        id: current_branch

      - name: Check for Existing Tag
        shell: bash
        env: 
          BRANCH: ${{ steps.current_branch.outputs.branch }}
        run: |
          tag=$(echo "$BRANCH" | grep -oE "[0-9]{4}[.-][0-9]{1,2}[.-][0-9]{1,2}")
          echo "tag=v$tag"
          echo "tag: $tag"
          if [ -n "$tag" ]; then
            echo "Checking for existing tag: $tag"
            if git ls-remote --tags origin | grep -q "$tag"; then
              echo "Tag $tag already exists in repo! This branch has already been released. Version number on branch needs to be incremented."
              exit 1
            else
              echo "No existing tag found: $tag"
            fi
          else
            echo "Not checking for tag, no tag could be parsed from the branch name"
          fi

      - name: Read Pipeline YAML
        id: read_yaml
        run: |
          pipelineYaml=$(cat pipeline.yaml)
          pipelineYaml="${pipelineYaml//'%'/'%25'}"
          pipelineYaml="${pipelineYaml//$'\n'/'%0A'}"
          pipelineYaml="${pipelineYaml//$'\r'/'%0D'}"
          # echo "pipelineYaml=$pipelineYaml" | tee -a $GITHUB_ENV
          echo "::set-output name=pipelineYaml::$pipelineYaml"
          # echo "pipelineYaml=$pipelineYaml" | tee -a $GITHUB_OUTPUT 


  Build:
    # if: ${{ github.job == build }}
    needs: main
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Determine Pipeline Type
        env:
          PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
        id: set-pipeline
        run: |
          deploymentType=$(awk '/type:/ {print $2}' $PIPELINE)

          case $deploymentType in
            mobility)
              echo "pipeline=mobility" >> $GITHUB_ENV
              ;;
            K8sClassic)
              echo "pipeline=K8sClassic" >> $GITHUB_ENV
              ;;
            helm)
              echo "pipeline=helm" >> $GITHUB_ENV
              ;;
            *)
              echo "pipeline=K8sClassic" >> $GITHUB_ENV
              ;;
          esac

      - name: Print Pipeline Type
        run: |
          echo "Pipeline Type: ${{ steps.set-pipeline.outputs.pipelineType }}"

      # - name: build
      #   env:
      #     PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
      #   run: |
      #     if grep -q "build:" <<< "$PIPELINE"; then
      #       echo "run groovy"
      #       # groovy pipeline.groovy build

      #     elif [[ $PIPELINE == *"containerBuild"* && -f Dockerfile ]]; then
      #         echo "containerBuild and Dockerfile found!"
            
      #     fi


