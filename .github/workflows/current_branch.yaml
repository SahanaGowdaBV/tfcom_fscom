name: Print Current Branch

on:
  push:
    branches: 
      release/2024.01-1.0
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    outputs: 
      branch: ${{ steps.current_branch.outputs.BRANCH }}
      pipelineYaml: ${{ steps.read_yaml.outputs.pipelineYaml }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Extract branch name
        shell: bash
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          echo "BRANCH=$branch_name" | tee -a $GITHUB_OUTPUT
          echo "branch: $branch_name"
        id: current_branch

      - name: Check for Existing Tag
        shell: bash
        env: 
          BRANCH: ${{ steps.current_branch.outputs.branch }}
        run: |
          tag=$(echo "$BRANCH" | grep -oE "[0-9]{4}[.-][0-9]{1,2}[.-][0-9]{1,2}")
          echo "tag=v$tag"
          echo "tag: $tag"
          if [ -n "$tag" ]; then
            echo "Checking for existing tag: $tag"
            if git ls-remote --tags origin | grep -q "$tag"; then
              echo "Tag $tag already exists in repo! This branch has already been released. Version number on branch needs to be incremented."
              exit 1
            else
              echo "No existing tag found: $tag"
            fi
          else
            echo "Not checking for tag, no tag could be parsed from the branch name"
          fi

      - name: Read Pipeline YAML
        id: read_yaml
        run: |
          pipelineYaml=$(cat pipeline.yaml)
          pipelineYaml="${pipelineYaml//'%'/'%25'}"
          pipelineYaml="${pipelineYaml//$'\n'/'%0A'}"
          pipelineYaml="${pipelineYaml//$'\r'/'%0D'}"
          # echo "pipelineYaml=$pipelineYaml" | tee -a $GITHUB_ENV
          echo "::set-output name=pipelineYaml::$pipelineYaml"
          # echo "pipelineYaml=$pipelineYaml" | tee -a $GITHUB_OUTPUT 


  Build:
    # if: ${{ github.job == build }}
    needs: main
    runs-on: ubuntu-latest
    outputs: 
      image: ${{ steps.build-image.outputs.IMAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # - name: Install yq
      #   run: |
      #     sudo wget https://github.com/mikefarah/yq/releases/download/v4.12.0/yq_linux_amd64 -O /usr/bin/yq
      #     sudo chmod +x /usr/bin/yq

      - name: Determine Pipeline Type
        env:
          PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
        id: set-pipeline
        run: |
          # deploymentType=$(echo "$PIPELINE" | grep -oP 'type: \K\w+' | head -n1)
          # deploymentType=$(echo "$PIPELINE" | yq eval '.deployment.type' -)


          while IFS= read -r deploymentType; do
            case $deploymentType in
              mobility)
                pipelineType="mobility"
                ;;
              K8sClassic)
                pipelineType="K8sClassic"
                ;;
              S3)
                pipelineType="S3"
                ;;
              helm)
                pipelineType="helm"
                ;;
              *)
                pipelineType="K8sClassic"
                ;;
            esac
      
            echo "pipelineType: $pipelineType"
            echo "pipelineType=$pipelineType" >> $GITHUB_OUTPUT
          # done < <(echo "$PIPELINE" | grep -oP 'type: \K\w+')
          done < <(echo "$PIPELINE" | yq eval '.deployment.type' -)
            

      - name: Validate K8sClassic and mobility
        if: ${{ env.pipelinetype == 'K8sClassic' || env.pipelinetype == 'mobility' }}
        id: validate-K8sClassic
        env:
          pipelinetype: ${{ steps.set-pipeline.outputs.pipelineType }}
          PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
        run: |
          # if [ "${pipelinetype}" = "K8sClassic" ] || [ "${pipelinetype}" = "mobility" ]; then
            echo "Checking for containerBuild in pipeline.yaml"     
            # Check if .containerBuild exists
            if [ "$(echo "$PIPELINE" | yq eval '.containerBuild' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.containerBuild.imageName' -)" != "null" ]; then
              echo "containerBuild and imageName is present"
            else
              echo "Configuration error: missing containerBuild and imageName" >&2
              exit 1
            fi

            echo "Checking for build in pipeline.yaml" 
            # Check if .build exists
            if [ "$(echo "$PIPELINE" | yq eval '.build' -)" != "null" ]; then
              if [ "$(echo "$PIPELINE" | yq eval '.build.image' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.build.steps' -)" != "null" ]; then
                echo "build.image and build.steps are present"
              else
                echo "Configuration error: missing build.image or build.steps" >&2
                exit 1
              fi
            fi

            echo "Checking for environment in pipeline.yaml" 
            # Checking for environment cluster
            keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[]' -)
            for key in $keys; do
              if [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".cluster' -)" != "null" ]; then
                echo "envirnment cluster is present for $key"
              else
                echo "Configuration error: missing envirnment cluster for $key" >&2
              exit 1
              fi
            done
     
            # Checking for environment promotion
            for key in $keys; do
              if [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".promotion' -)" != "null" ]; then
                if [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".promotion.to' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".promotion.mergeTo' -)" != "null" ]; then
                  echo "Validation successful for $key"
                else
                  echo "Configuration error: missing promotion.to or promotion.mergeTo for $key" >&2
                  exit 1
                fi
              fi
            done
            
            echo "Checking for deployment in pipeline.yaml"     
            # Check if .deployment exists
            if [ "$(echo "$PIPELINE" | yq eval '.deployment.name' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.deployment.namespace' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.deployment.containerPort' -)" != "null" ]&& [ "$(echo "$PIPELINE" | yq eval '.deployment.replicas' -)" != "null" ]&& [ "$(echo "$PIPELINE" | yq eval '.deployment.healthCheckPath' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.deployment.healthCheckPort' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.deployment.cpu' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.deployment.memory' -)" != "null" ] ; then
              echo "deployment, name, namespace, containerPort, replicas, healthCheckPath,healthCheckPort, cpu, memory is present"
            else
              echo "Configuration error: missing Deployment/name/namespace/containerPort/replicas/healthCheckPath/healthCheckPort/cpu/memory " >&2
              exit 1
            fi

            echo "Checking for deployment.prometheus in pipeline.yaml" 
            # Check if .deployment.prometheus exists
            if [ "$(echo "$PIPELINE" | yq eval '.deployment.prometheus' -)" != "null" ]; then
              if [ "$(echo "$PIPELINE" | yq eval '.deployment.prometheus.port' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.deployment.prometheus.type' -)" != "null" ]; then
                echo "deployment.prometheus.port and deployment.prometheus.type are present"
              else
                echo "Configuration error: missing deployment.prometheus.port or deployment.prometheus.type" >&2
                exit 1
              fi
            fi

      - name: Validate Helm
        if: ${{ env.pipelinetype == 'helm' }}
        id: validate-helm
        env:
          pipelinetype: ${{ steps.set-pipeline.outputs.pipelineType }}
          PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
        run: |
          # if [ "${pipelinetype}" = "K8sClassic" ] || [ "${pipelinetype}" = "mobility" ]; then
            echo "Checking for containerBuild in pipeline.yaml"     
            # Check if .containerBuild exists
            if [ "$(echo "$PIPELINE" | yq eval '.containerBuild' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.containerBuild.imageName' -)" != "null" ]; then
              echo "containerBuild and imageName is present"
            else
              echo "Configuration error: missing containerBuild and imageName" >&2
              exit 1
            fi

            echo "Checking for build in pipeline.yaml" 
            # Check if .build exists
            if [ "$(echo "$PIPELINE" | yq eval '.build' -)" != "null" ]; then
              if [ "$(echo "$PIPELINE" | yq eval '.build.image' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.build.steps' -)" != "null" ]; then
                echo "build.image and build.steps are present"
              else
                echo "Configuration error: missing build.image or build.steps" >&2
                exit 1
              fi
            fi

            echo "Checking for environment in pipeline.yaml" 
            # Checking for environment cluster
            keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[]' -)
            for key in $keys; do
              if [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".cluster' -)" != "null" ]; then
                echo "envirnment cluster is present for $key"
              else
                echo "Configuration error: missing envirnment cluster for $key" >&2
              exit 1
              fi
            done
     
            # Checking for environment promotion
            for key in $keys; do
              if [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".promotion' -)" != "null" ]; then
                if [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".promotion.to' -)" != "null" ]; then
                  echo "Validation successful for $key"
                else
                  echo "Configuration error: missing promotion.to for $key" >&2
                  exit 1
                fi
              fi
            done

            echo "Checking for deployment in pipeline.yaml"     
            # Check if .deployment exists
            if [ "$(echo "$PIPELINE" | yq eval '.deployment.name' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.deployment.namespace' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.deployment.chartName' -)" != "null" ]; then
              echo "deployment, name, namespace, chartName is present"
            else
              echo "Configuration error: missing Deployment/name/namespace/chartName " >&2
              exit 1
            fi

      - name: Validate S3
        if: ${{ env.pipelinetype == 'S3' }}
        id: validate-S3
        env:
          pipelinetype: ${{ steps.set-pipeline.outputs.pipelineType }}
          PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
        run: |
          # if [ "${pipelinetype}" = "K8sClassic" ] || [ "${pipelinetype}" = "mobility" ]; then
            echo "Checking for containerBuild in pipeline.yaml"     
            # Check if .containerBuild exists
            if [ "$(echo "$PIPELINE" | yq eval '.containerBuild' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.containerBuild.imageName' -)" != "null" ]; then
              echo "containerBuild and imageName is present"
            else
              echo "Configuration error: missing containerBuild and imageName" >&2
              exit 1
            fi

            echo "Checking for build in pipeline.yaml" 
            # Check if .build exists
            if [ "$(echo "$PIPELINE" | yq eval '.build' -)" != "null" ]; then
              if [ "$(echo "$PIPELINE" | yq eval '.build.image' -)" != "null" ] && [ "$(echo "$PIPELINE" | yq eval '.build.steps' -)" != "null" ]; then
                echo "build.image and build.steps are present"
              else
                echo "Configuration error: missing build.image or build.steps" >&2
                exit 1
              fi
            fi

            echo "Checking for environment in pipeline.yaml" 
            # Checking for environment cluster
            keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[]' -)
            # Checking for environment promotion
            for key in $keys; do
              if [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".promotion' -)" != "null" ]; then
                if [ "$(echo "$PIPELINE" | yq eval '.environments."'"${key}"'".promotion.to' -)" != "null" ]; then
                  echo "Validation successful for $key"
                else
                  echo "Configuration error: missing promotion.to or promotion.mergeTo for $key" >&2
                  exit 1
                fi
              fi
            done

            echo "Checking for deployment in pipeline.yaml"     
            # Check if .deployment exists
            if [ "$(echo "$PIPELINE" | yq eval '.deployment.name' -)" != "null" ] ; then
              echo "deployment, name is present"
            else
              echo "Configuration error: missing Deployment/name " >&2
              exit 1
            fi

      - name: Validate the branch
        id: validate-branch
        env:
          CURRENT_BRANCH: ${{ needs.main.outputs.branch }}
          PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
        run: |
          image=$(echo "$PIPELINE" | yq eval '.build.image // ""')
          echo "image: $image"

      - name: Pull image name
        id: build-image
        env:
            PIPELINE: ${{ needs.main.outputs.pipelineYaml }}        
        run: |
            IMAGE=$(echo "$PIPELINE" | yq eval '.build.image // ""')
            echo "IMAGE=$IMAGE" >> GITHUB_OUTPUT
            echo "IMAGE: $IMAGE"
            
            steps=$(echo "$PIPELINE" | yq eval '.build.steps // ""')
            echo "steps=$steps" >> GITHUB_ENV
            echo "steps: $steps"

      - name: Run Docker Build
        id: docker-run
        env: 
          IMAGE: ${{ steps.build-image.outputs.IMAGE }}
          STEPS: ${{ steps.build-image.outputs.steps }}
        run: | 
            echo "$STEPS"
            echo "$IMAGE"

          # echo "Validating the branch for environments:"

          # # Loop through environments
          # keys=$(echo "$PIPELINE" | yq eval '.environments | keys | .[]' -)
          # for key in $keys; do
          #   branch=$(echo "$PIPELINE" | yq eval ".environments.$key.branch" -)
          #   echo "Environment: $key, Branch in YAML: $branch, Current Branch: $CURRENT_BRANCH"

          #   # Check if the current branch matches the environment branch
          #   if [ "${branch}" != "null" ] && [[ "${CURRENT_BRANCH}" =~ ^${branch}$ ]]; then
          #   # if [ "${CURRENT_BRANCH}" = "${branch}" ]; then
          #     echo "Current branch matches for environment: $key"
          #   fi
          # done           

          #   echo "YAML validation successful"
          # elif [ "${PIPELINE_TYPE}" = "mobility" ]; then
          #   # Check if mobility exists
          #   if ! yq eval '.containerBuild' path/to/your/file.yaml >/dev/null 2>&1; then
          #     echo "Configuration error: missing containerBuild" >&2
          #     exit 1
          #   fi

          #   # Check if mobility containerBuild exists
          #   if ! yq eval '.containerBuild.imageName' path/to/your/file.yaml >/dev/null 2>&1; then
          #     echo "Configuration error: missing containerBuild.imageName" >&2
          #     exit 1
          #   fi

          #   echo "YAML validation successful"
          # fi


      # - name: build
      #   env:
      #     PIPELINE: ${{ needs.main.outputs.pipelineYaml }}
      #   run: |
      #     if grep -q "build:" <<< "$PIPELINE"; then
      #       echo "run groovy"
      #       # groovy pipeline.groovy build

      #     elif [[ $PIPELINE == *"containerBuild"* && -f Dockerfile ]]; then
      #         echo "containerBuild and Dockerfile found!"
            
      #     fi


